set -u

# Get staged files (added/changed/moved)
STAGED_FILES="$(git diff --cached --name-only --diff-filter=ACM)"

# Nothing staged? exit successfully
if [ -z "$STAGED_FILES" ]; then
  echo "‚úÖ No files staged for commit, skipping hooks"
  exit 0
fi

# If all staged files are docs/config only, skip linting
# (matches: docs/, any .md, README.md, CHANGELOG.md, LICENSE, .husky/)
DOCS_ONLY_PATTERNS='^\(docs/\|README\.md$\|.*\.md$\|CHANGELOG\.md$\|LICENSE$\|\.husky/\)'
NON_DOCS="$(printf '%s\n' "$STAGED_FILES" | grep -Ev "$DOCS_ONLY_PATTERNS" || true)"

if [ -z "$NON_DOCS" ]; then
  echo "üìù Documentation-only commit detected, skipping ESLint"
  printf 'üìÑ Files:\n%s\n' "$STAGED_FILES"
  exit 0
fi

# Collect JS/TS files to lint (excluding config files and configs/ directory)
CODE_FILES="$(printf '%s\n' "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' | grep -Ev '(\.config\.|commitlint|eslint|prettier|configs/)' || true)"

if [ -z "$CODE_FILES" ]; then
  echo "‚úÖ No JS/TS source files staged for commit, skipping ESLint"
  exit 0
fi

echo "üîç Running ESLint on staged files..."
printf 'Linting:\n%s\n' "$CODE_FILES"

# Run ESLint on just the staged JS/TS files
# (xargs handles spaces/newlines safely)
printf '%s\n' "$CODE_FILES" | xargs npx eslint --config configs/linting/eslint.config.js --max-warnings 500 --
ESLINT_STATUS=$?

if [ $ESLINT_STATUS -ne 0 ]; then
  echo "‚ùå ESLint found issues in staged files"
  echo "üí° Run 'npm run lint:fix' to auto-fix issues, then re-stage files"
  exit 1
fi

echo "‚úÖ ESLint passed for staged files"
exit 0
