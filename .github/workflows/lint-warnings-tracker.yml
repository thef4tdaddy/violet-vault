name: Lint Warnings Tracker

on:
  # Hourly tracking for active development monitoring
  schedule:
    - cron: "0 * * * *" # Every hour

  # Keep PR checks for validation
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "scripts/**"
      - "*.js"
      - "*.jsx"
      - "*.ts"
      - "*.tsx"

  # Manual trigger option
  workflow_dispatch:

jobs:
  lint-warnings:
    runs-on: ubuntu-latest
    name: Track Lint Warnings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # For scheduled runs, use develop branch to get latest workflow logic
          ref: ${{ github.event_name == 'schedule' && 'develop' || github.ref }}
          # This ensures scheduled runs get the latest delta calculation logic

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint and capture warnings
        id: lint
        run: |
          # Run ESLint with JSON format for reliable parsing
          npx eslint --config configs/eslint.config.js . --ext .js,.jsx,.ts,.tsx --format json > eslint-output.json 2>/dev/null || true

          # Count warnings from JSON output (more reliable than text parsing)
          NEW_COUNT=$(cat eslint-output.json | jq '[.[] | .messages[] | select(.severity == 1)] | length')
          echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT

          # For backward compatibility, also create the parsed warnings file
          node scripts/parse-eslint-warnings.js <(npx eslint --config configs/eslint.config.js . --ext .js,.jsx,.ts,.tsx 2>/dev/null || echo "") > new-warnings.json 2>/dev/null || echo '{"currentStatus":{"totalWarnings":0}}' > new-warnings.json

      - name: Check warning increase threshold
        id: check_threshold
        run: |
          PERCENTAGE_INCREASE="${{ steps.lint.outputs.percentage_increase }}"
          CURRENT_COUNT="${{ steps.lint.outputs.current_count }}"
          NEW_COUNT="${{ steps.lint.outputs.new_count }}"

          echo "üìä **Lint Warning Analysis**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous warnings:** $CURRENT_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Current warnings:** $NEW_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Change:** $PERCENTAGE_INCREASE%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if increase is over 20%
          if (( $(echo "$PERCENTAGE_INCREASE > 20" | bc -l) )); then
            echo "‚ùå **FAILED:** Warning count increased by $PERCENTAGE_INCREASE% (over 20% threshold)" >> $GITHUB_STEP_SUMMARY
            echo "threshold_exceeded=true" >> $GITHUB_OUTPUT
            # Don't exit - continue with issue updates (graduated approach allows higher warning counts)
          elif (( $(echo "$PERCENTAGE_INCREASE > 0" | bc -l) )); then
            echo "‚ö†Ô∏è **WARNING:** Warning count increased by $PERCENTAGE_INCREASE% (within 20% threshold)" >> $GITHUB_STEP_SUMMARY
            echo "threshold_exceeded=false" >> $GITHUB_OUTPUT
          elif (( $(echo "$PERCENTAGE_INCREASE < 0" | bc -l) )); then
            echo "‚úÖ **IMPROVED:** Warning count decreased by $(echo "$PERCENTAGE_INCREASE * -1" | bc -l)%" >> $GITHUB_STEP_SUMMARY
            echo "threshold_exceeded=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ **STABLE:** No change in warning count" >> $GITHUB_STEP_SUMMARY
            echo "threshold_exceeded=false" >> $GITHUB_OUTPUT
          fi

      - name: Update lint-warnings.json on main/develop push
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        run: |
          # Replace the existing lint-warnings.json with the new data
          cp new-warnings.json .github/data/lint-warnings.json

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes
          if git diff --quiet .github/data/lint-warnings.json; then
            echo "No changes to lint-warnings.json"
          else
            git add .github/data/lint-warnings.json
            git commit -m "chore: update lint warnings tracking data [skip ci]
            
            Updated by GitHub Action after lint analysis
            
            ü§ñ Generated with GitHub Actions"
            git push
          fi

      - name: Comment on PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const currentCount = '${{ steps.lint.outputs.current_count }}';
            const newCount = '${{ steps.lint.outputs.new_count }}';
            const percentageIncrease = '${{ steps.lint.outputs.percentage_increase }}';
            const thresholdExceeded = '${{ steps.check_threshold.outputs.threshold_exceeded }}' === 'true';

            let emoji = '‚úÖ';
            let status = 'PASSED';
            let color = 'green';

            if (thresholdExceeded) {
              emoji = '‚ùå';
              status = 'FAILED';
              color = 'red';
            } else if (parseFloat(percentageIncrease) > 0) {
              emoji = '‚ö†Ô∏è';
              status = 'WARNING';
              color = 'orange';
            }

            const body = `## ${emoji} Lint Warning Analysis - ${status}

            | Metric | Value |
            |--------|-------|
            | **Previous Warnings** | ${currentCount} |
            | **Current Warnings** | ${newCount} |
            | **Change** | ${percentageIncrease}% |
            | **Threshold** | 20% increase |

            ${thresholdExceeded 
              ? 'üö® **This PR exceeds the 20% warning increase threshold and will be blocked.**' 
              : '‚úÖ **This PR is within the acceptable warning increase threshold.**'
            }

            <details>
            <summary>View detailed warning breakdown</summary>

            The full warning analysis is available in the workflow summary.
            You can also check the \`.github/data/lint-warnings.json\` file for detailed breakdown by category and file.

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Check if should run based on branch and schedule
        id: should_run
        run: |
          # For scheduled runs, check branch-specific frequency
          if [ "${{ github.event_name }}" == "schedule" ]; then
            HOUR=$(date +%H)
            DAY_OF_WEEK=$(date +%u) # 1=Monday, 7=Sunday
            
            # Run on develop branch every hour
            echo "should_run_develop=true" >> $GITHUB_OUTPUT
            echo "üìÖ Running hourly check for develop branch"
            
            # Run on main branch daily at 9 AM CST (15 UTC during DST, 14 UTC during standard time)
            # For simplicity, using 15 UTC which is 9 AM CDT (summer time)
            if [ "$HOUR" == "15" ]; then
              echo "should_run_main=true" >> $GITHUB_OUTPUT
              echo "üìÖ Running daily check for main branch"
            else
              echo "should_run_main=false" >> $GITHUB_OUTPUT
            fi
          else
            # Always run for push events and manual triggers
            echo "should_run_develop=true" >> $GITHUB_OUTPUT
            echo "should_run_main=true" >> $GITHUB_OUTPUT
          fi

      - name: Get warnings for develop branch
        if: steps.should_run.outputs.should_run_develop == 'true'
        id: develop_warnings
        run: |
          echo "üîç Checking develop branch..."
          git fetch origin develop:develop || echo "Could not fetch develop branch"
          git checkout develop 2>/dev/null || { 
            echo "Could not checkout develop branch, trying to create it from origin"
            git checkout -b develop origin/develop 2>/dev/null || echo "Failed to create develop branch"
          }

          # Verify we're on develop and re-install deps if needed
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch: $CURRENT_BRANCH"

          if [ "$CURRENT_BRANCH" = "develop" ]; then
            echo "‚úÖ Successfully on develop branch"
            npm ci --silent
            npm run lint --silent > eslint-develop.txt 2>&1 || true
            node scripts/parse-eslint-warnings.js eslint-develop.txt > develop-warnings.json 2>/dev/null || echo '{"currentStatus":{"totalWarnings":0}}' > develop-warnings.json
          else
            echo "‚ùå Failed to switch to develop branch, using fallback"
            echo '{"currentStatus":{"totalWarnings":0}}' > develop-warnings.json
          fi

          DEVELOP_WARNINGS=$(cat develop-warnings.json | jq -r '.currentStatus.totalWarnings // 0')
          echo "Develop warnings: $DEVELOP_WARNINGS"
          echo "warnings=$DEVELOP_WARNINGS" >> $GITHUB_OUTPUT

      - name: Get warnings for main branch
        if: steps.should_run.outputs.should_run_main == 'true'
        id: main_warnings
        run: |
          echo "üîç Checking main branch..."
          git fetch origin main:main || echo "Could not fetch main branch"
          git checkout main 2>/dev/null || {
            echo "Could not checkout main branch, trying to create it from origin"
            git checkout -b main origin/main 2>/dev/null || echo "Failed to create main branch"
          }

          # Verify we're on main and re-install deps if needed
          CURRENT_BRANCH=$(git branch --show-current)
          echo "Current branch: $CURRENT_BRANCH"

          if [ "$CURRENT_BRANCH" = "main" ]; then
            echo "‚úÖ Successfully on main branch"
            npm ci --silent
            npm run lint --silent > eslint-main.txt 2>&1 || true
            node scripts/parse-eslint-warnings.js eslint-main.txt > main-warnings.json 2>/dev/null || echo '{"currentStatus":{"totalWarnings":0}}' > main-warnings.json
          else
            echo "‚ùå Failed to switch to main branch, using fallback"
            echo '{"currentStatus":{"totalWarnings":0}}' > main-warnings.json
          fi

          MAIN_WARNINGS=$(cat main-warnings.json | jq -r '.currentStatus.totalWarnings // 0')
          echo "Main warnings: $MAIN_WARNINGS"
          echo "warnings=$MAIN_WARNINGS" >> $GITHUB_OUTPUT

      - name: Update Master Lint Warnings Issue
        if: steps.should_run.outputs.should_run_develop == 'true' || steps.should_run.outputs.should_run_main == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Get previous warnings from the last comment BEFORE hiding anything  
            let previousDevelopWarnings = null;
            let previousMainWarnings = null;

            try {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: 568
              });
              
              // Find the most recent bot comment (check body content, not just user)
              const lastBotComment = comments.data
                .filter(comment => 
                  comment.user.login === 'github-actions[bot]' && (
                    comment.body.includes('**Develop Branch:**') || 
                    comment.body.includes('**Main Branch:**') ||
                    comment.body.includes('üìä Lint Warnings Update')
                  )
                )
                .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];
              
              if (lastBotComment) {
                console.log('üìã Found previous comment for delta calculation');
                
                // More robust regex patterns to extract warning counts
                const devMatch = lastBotComment.body.match(/\*\*Develop Branch:\*\*\s*(\d+)\s*warnings/i);
                const mainMatch = lastBotComment.body.match(/\*\*Main Branch:\*\*\s*(\d+)\s*warnings/i);
                
                if (devMatch) previousDevelopWarnings = parseInt(devMatch[1]);
                if (mainMatch) previousMainWarnings = parseInt(mainMatch[1]);
                
                console.log(`Previous values extracted: Develop=${previousDevelopWarnings}, Main=${previousMainWarnings}`);
              } else {
                console.log('‚ö†Ô∏è No previous bot comment found - this is likely the first run');
              }

              // Hide previous automation comments by wrapping in details/summary
              const automationComments = comments.data.filter(comment => 
                comment.user.login === 'github-actions[bot]' &&
                (comment.body.includes('üìä Lint Warnings Update') ||
                 comment.body.includes('**Develop Branch:**') ||
                 comment.body.includes('**Main Branch:**')) &&
                !comment.body.startsWith('<details>') &&
                comment.id !== lastBotComment?.id // Don't hide the comment we just used
              );
              
              // Hide previous comments using simple REST API update (more reliable than GraphQL)
              for (const comment of automationComments) {
                try {
                  await github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: comment.id,
                    body: `<details><summary>üìä Previous Lint Warnings Update (outdated)</summary>\n\n${comment.body}\n\n</details>`
                  });
                  console.log(`‚úÖ Minimized comment #${comment.id}`);
                } catch (updateError) {
                  console.log(`‚ö†Ô∏è Could not minimize comment #${comment.id}: ${updateError.message}`);
                }
              }
            } catch (error) {
              console.log('‚ö†Ô∏è Could not process previous comments:', error.message);
            }

            // Load template from markdown file
            const template = fs.readFileSync('.github/data/lint-warnings-comment.md', 'utf8');

            // Prepare template variables with Americas/Chicago timezone
            const now = new Date();

            // Convert UTC to Central Time (UTC-6 standard, UTC-5 daylight)
            const chicagoTime = new Date(now.toLocaleString("en-US", {timeZone: "America/Chicago"}));

            const currentDate = chicagoTime.toLocaleString('en-US', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZoneName: 'short'
            });

            console.log(`UTC Time: ${now.toISOString()}`);
            console.log(`Chicago Time: ${currentDate}`);

            const developWarnings = '${{ steps.develop_warnings.outputs.warnings }}' || '0';
            const mainWarnings = '${{ steps.main_warnings.outputs.warnings }}' || '0';

            // Calculate deltas (change from previous)
            const developDelta = previousDevelopWarnings !== null ? developWarnings - previousDevelopWarnings : null;
            const mainDelta = previousMainWarnings !== null ? mainWarnings - previousMainWarnings : null;

            console.log(`Delta calculation: Develop Œî=${developDelta}, Main Œî=${mainDelta}`);

            // Check if we should skip posting (no meaningful changes)
            const runningDevelop = '${{ steps.should_run.outputs.should_run_develop }}' === 'true';
            const runningMain = '${{ steps.should_run.outputs.should_run_main }}' === 'true';

            // Only skip if we have previous data AND there are no changes
            const hasChanges = (
              (runningDevelop && (previousDevelopWarnings === null || developDelta !== 0)) ||
              (runningMain && (previousMainWarnings === null || mainDelta !== 0))
            );

            if (!hasChanges) {
              console.log('üîá Skipping comment - no changes in warning counts');
              console.log(`Develop: ${previousDevelopWarnings} ‚Üí ${developWarnings} (Œî: ${developDelta})`);
              console.log(`Main: ${previousMainWarnings} ‚Üí ${mainWarnings} (Œî: ${mainDelta})`);
              return;
            }

            console.log('üìù Posting comment - changes detected or first run');
            console.log(`Running: Develop=${runningDevelop}, Main=${runningMain}`);
            console.log(`Develop: ${previousDevelopWarnings} ‚Üí ${developWarnings} (Œî: ${developDelta})`);
            console.log(`Main: ${previousMainWarnings} ‚Üí ${mainWarnings} (Œî: ${mainDelta})`);

            let branchInfo = '';
            if ('${{ steps.should_run.outputs.should_run_develop }}' === 'true') {
              const deltaText = developDelta !== null ? 
                (developDelta > 0 ? ` (+${developDelta})` : 
                 developDelta < 0 ? ` (${developDelta})` : ' (no change)') : '';
              branchInfo += `**Develop Branch:** ${developWarnings} warnings${deltaText}\n`;
            }
            if ('${{ steps.should_run.outputs.should_run_main }}' === 'true') {
              const deltaText = mainDelta !== null ? 
                (mainDelta > 0 ? ` (+${mainDelta})` : 
                 mainDelta < 0 ? ` (${mainDelta})` : ' (no change)') : '';
              branchInfo += `**Main Branch:** ${mainWarnings} warnings${deltaText}\n`;
            }

            const statusMessage = developWarnings < 96 
              ? `‚úÖ Develop improved: -${96 - developWarnings} from baseline (96)`
              : `‚ö†Ô∏è Develop increased: +${developWarnings - 96} from baseline (96)`;

            // Read detailed warning data for develop branch
            let detailedInfo = '';
            try {
              if ('${{ steps.should_run.outputs.should_run_develop }}' === 'true') {
                const developDetails = JSON.parse(fs.readFileSync('./develop-warnings.json', 'utf8'));
                
                if (developDetails && developDetails.warningCategories) {
                  const topWarnings = developDetails.warningCategories.slice(0, 5);
                  detailedInfo += '\n\n### üìã Top Warning Categories:\n';
                  topWarnings.forEach(cat => {
                    detailedInfo += `- **${cat.type}**: ${cat.count} warnings (${cat.files.length} files)\n`;
                  });

                  // Show worst offender files
                  const allFiles = [];
                  developDetails.warningCategories.forEach(cat => {
                    cat.files.forEach(file => {
                      const existing = allFiles.find(f => f.path === file.path);
                      if (existing) {
                        existing.warnings += file.warnings;
                      } else {
                        allFiles.push({ path: file.path, warnings: file.warnings });
                      }
                    });
                  });
                  
                  const topFiles = allFiles.sort((a, b) => b.warnings - a.warnings).slice(0, 10);
                  if (topFiles.length > 0) {
                    detailedInfo += '\n### üî• Files with Most Warnings:\n';
                    topFiles.forEach(file => {
                      const fileName = file.path.split('/').pop();
                      detailedInfo += `- **${fileName}**: ${file.warnings} warnings\n`;
                    });
                  }

                  // Priority actions
                  if (developDetails.actionPlan && developDetails.actionPlan.highPriority && developDetails.actionPlan.highPriority.length > 0) {
                    detailedInfo += '\n### ‚ö†Ô∏è High Priority Actions:\n';
                    developDetails.actionPlan.highPriority.slice(0, 3).forEach(task => {
                      detailedInfo += `- **${task.task}**: ${task.warningsAffected} warnings\n`;
                    });
                  }
                }
              }
            } catch (error) {
              console.log('Could not read develop warning details:', error.message);
            }

            // Replace template variables
            const commentBody = template
              .replace(/\$\{\{ currentDate \}\}/g, currentDate)
              .replace(/\$\{\{ branchInfo \}\}/g, branchInfo)
              .replace(/\$\{\{ statusMessage \}\}/g, statusMessage)
              .replace(/\$\{\{ detailedInfo \}\}/g, detailedInfo);

            // Add comment to the master issue (Issue #568)
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: 568,
                body: commentBody
              });
              
              console.log('‚úÖ Successfully added comment to Master Lint Warnings Issue #568');
            } catch (error) {
              console.log('‚ùå Failed to add comment to issue #568:', error.message);
            }
