name: Enforce Commit Types on Develop Branch

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
    types: [opened, synchronize, reopened]

jobs:
  check-commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Validate commit types (fix/docs/style/perf/ci/revert only)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Skip commit checks for trusted automation actors
          if [[ "${{ github.actor }}" == "github-actions[bot]" || "${{ github.actor }}" == "actions-user" ]]; then
            echo "✅ Skipping commit check for trusted automation actor: ${{ github.actor }}"
            exit 0
          fi

          ALLOWED="^(fix|docs|style|perf|ci|revert):"
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}

          # Debug information
          echo "🔍 Debug Info:"
          echo "  - PR Number: $PR_NUMBER" 
          echo "  - Repository: $REPO"
          echo "  - Actor: ${{ github.actor }}"
          echo "  - Event: ${{ github.event_name }}"

          # Handle different event types
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ -z "$PR_NUMBER" ]; then
              echo "⚠️  No PR number found, skipping commit validation"
              exit 0
            fi
            echo "📥 Fetching commits from PR #$PR_NUMBER..."
            gh pr view "$PR_NUMBER" --repo "$REPO" --json commits -q '.commits[].message' > commits.txt
          else
            echo "📥 Fetching commits from push event..."
            # For push events, get the recent commits
            git log --format=%s -n 10 > commits.txt
          fi

          # Check if commits.txt has content
          if [ ! -s commits.txt ]; then
            echo "⚠️  No commit messages found, skipping validation"
            exit 0
          fi

          echo "📋 Found commits to validate:"
          cat -n commits.txt
          echo ""

          DISALLOWED=0
          while read -r msg; do
            # Skip empty lines
            if [ -z "$msg" ]; then
              continue
            fi
            
            echo "🔎 Checking commit: '$msg'"
            if ! echo "$msg" | grep -Eq "$ALLOWED"; then
              echo "❌ Disallowed commit message:"
              echo "   \"$msg\""
              echo "🔒 Only fix:, docs:, style:, perf:, ci:, and revert: commit types are allowed on develop."
              echo "💡 feat: commits should come via PR from feature branches to enforce proper review process."
              echo "👉 Please adjust your commit message or target a different branch."
              DISALLOWED=1
            else
              echo "✅ Valid commit message format"
            fi
          done < commits.txt

          if [ "$DISALLOWED" -eq 1 ]; then
            echo "🚫 Commit check failed. See above for invalid messages."
            exit 1
          fi

      - name: Success
        run: echo "✅ All commits use allowed types for develop branch."
