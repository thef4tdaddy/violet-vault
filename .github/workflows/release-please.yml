name: Release Please

on:
  # Manual trigger for immediate releases
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force release even if major/minor"
        required: false
        default: false
        type: boolean

  # Hourly automated check for patch releases only (as requested in #547)
  schedule:
    - cron: "0 * * * *" # Every hour at minute 0

  # Also run on push to main for immediate patch releases
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # Always create release-please PR - this creates the PR but doesn't release
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Release Please
        uses: googleapis/release-please-action@v4
        id: release
        with:
          config-file: configs/release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Release Summary
        if: steps.release.outputs.release_created
        run: |
          echo "üöÄ Release created: ${{ steps.release.outputs.tag_name }}"
          echo "üì¶ Package: violet-vault"

  # Check release type after release-please runs
  check-auto-release:
    needs: release-please
    runs-on: ubuntu-latest
    if: needs.release-please.outputs.release_created
    outputs:
      should-auto-deploy: ${{ steps.check.outputs.should-auto-deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if auto-deploy should run
        id: check
        run: |
          # Get the just-created tag
          TAG_NAME="${{ needs.release-please.outputs.tag_name }}"
          echo "Checking tag: $TAG_NAME"

          # Get previous tag for comparison
          PREV_TAG=$(git tag --sort=-version:refname | grep -v "$TAG_NAME" | head -1)
          echo "Previous tag: $PREV_TAG"

          # Get commits in this release
          if [ -n "$PREV_TAG" ]; then
            COMMITS_IN_RELEASE=$(git log --oneline ${PREV_TAG}..${TAG_NAME} --format="%s")
          else
            COMMITS_IN_RELEASE=$(git log --oneline --format="%s" | head -20)
          fi

          echo "Commits in release:"
          echo "$COMMITS_IN_RELEASE"

          # Check for breaking changes or major features
          HAS_BREAKING=$(echo "$COMMITS_IN_RELEASE" | grep -i "BREAKING CHANGE\|!" || true)
          HAS_MAJOR_FEAT=$(echo "$COMMITS_IN_RELEASE" | grep -E "^feat(\([^)]*\))?!:" || true)
          HAS_FEAT=$(echo "$COMMITS_IN_RELEASE" | grep -E "^feat(\([^)]*\))?:" || true)

          # Only auto-deploy patch releases (no feat: or BREAKING CHANGE)
          if [ -z "$HAS_BREAKING" ] && [ -z "$HAS_MAJOR_FEAT" ] && [ -z "$HAS_FEAT" ]; then
            echo "should-auto-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Patch release detected - will auto-deploy"
          elif [ "${{ github.event.inputs.force_release }}" = "true" ]; then
            echo "should-auto-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Forced release - will auto-deploy"
          else
            echo "should-auto-deploy=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Major/minor release detected - manual deployment required"
            echo "::warning::This is a major/minor release. Build artifacts will be created but not deployed automatically."
          fi

  # Build and deploy when a release is created (conditionally)
  build-and-deploy:
    needs: [release-please, check-auto-release]
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test:run

      - name: Build
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.release-please.outputs.tag_name }}
          path: dist/

      - name: Deployment Status
        run: |
          if [ "${{ needs.check-auto-release.outputs.should-auto-deploy }}" = "true" ]; then
            echo "‚úÖ Patch release - artifacts ready for automatic deployment"
          else
            echo "‚ö†Ô∏è Major/minor release - manual deployment review required"
            echo "Build artifacts have been created and are ready for manual deployment when approved."
          fi
