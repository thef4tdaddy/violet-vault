name: "🔦 Lighthouse Performance Monitoring"

on:
  # Different schedules for different branches
  schedule:
    - cron: "0 */3 * * *" # Every 3 hours for develop (frequent changes)
    - cron: "0 8,20 * * *" # Twice daily for main (less frequent changes)

  # Allow manual trigger with branch selection
  workflow_dispatch:
    inputs:
      target_url:
        description: "Target URL to test"
        required: false
        default: "https://dev.f4tdaddy.com"
        type: string
      branch_to_test:
        description: "Branch to test (main or develop)"
        required: false
        default: "develop"
        type: choice
        options:
          - develop
          - main

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Determine which branch to test based on schedule or manual input
        test_branch: ${{ github.event_name == 'workflow_dispatch' && fromJSON(format('["{0}"]', github.event.inputs.branch_to_test)) || (github.event.schedule == '0 */3 * * *' && fromJSON('["develop"]')) || fromJSON('["main"]') }}

    steps:
      - name: "🏗️ Checkout ${{ matrix.test_branch }} branch for testing"
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.test_branch }}
          fetch-depth: 0 # Need history for proper commit info

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: "📦 Install dependencies"
        run: npm ci

      - name: "🎫 Generate dev auth token"
        id: auth
        run: |
          TOKEN=$(DEV_AUTH_SECRET="${{ secrets.DEV_AUTH_SECRET }}" node scripts/generate-dev-auth-token.js | grep -A1 "🔗 Token:" | tail -1)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
        env:
          DEV_AUTH_SECRET: ${{ secrets.DEV_AUTH_SECRET }}

      - name: "🔐 Authenticate with dev auth bypass"
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"
          echo "🔐 Authenticating with $TARGET_URL..."

          # Authenticate and get cookies
          curl -c cookies.txt -b cookies.txt -L "$TARGET_URL/__dev_auth?token=${{ steps.auth.outputs.token }}&target=/dashboard"

          echo "✅ Authentication complete"

      - name: "📂 Create lighthouse directory"
        run: mkdir -p lighthouse-results

      - name: "🔦 Run Lighthouse on authenticated pages"
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"

          # Pages to test (authenticated)
          PAGES=(
            "/dashboard"
            "/envelopes"
            "/transactions"
            "/bills"
            "/savings"
            "/analytics"
          )

          for PAGE in "${PAGES[@]}"; do
            echo "🔦 Testing $TARGET_URL$PAGE"

            npx lighthouse "$TARGET_URL$PAGE" \
              --chrome-flags="--headless --no-sandbox --disable-gpu" \
              --output=html \
              --output=json \
              --output-path="./lighthouse-results/$(echo $PAGE | sed 's/\//-/g')" \
              --preset=desktop \
              --quiet || echo "⚠️ Lighthouse failed for $PAGE"
          done

      - name: "📊 Generate summary report"
        run: |
          echo "# 🔦 Lighthouse Performance Report" > lighthouse-results/SUMMARY.md
          echo "" >> lighthouse-results/SUMMARY.md
          echo "**Generated:** $(date -u)" >> lighthouse-results/SUMMARY.md
          echo "**Target:** ${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}" >> lighthouse-results/SUMMARY.md
          echo "**Branch:** ${{ matrix.test_branch }}" >> lighthouse-results/SUMMARY.md
          echo "**Commit:** ${{ github.sha }}" >> lighthouse-results/SUMMARY.md
          echo "" >> lighthouse-results/SUMMARY.md

          # Parse JSON results and create summary
          for file in lighthouse-results/*.json; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .json)
              PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              SEO=$(jq -r '.categories.seo.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")

              echo "## 📄 Page: $PAGE" >> lighthouse-results/SUMMARY.md
              echo "| Metric | Score |" >> lighthouse-results/SUMMARY.md
              echo "|--------|-------|" >> lighthouse-results/SUMMARY.md
              echo "| 🚀 Performance | $PERFORMANCE% |" >> lighthouse-results/SUMMARY.md
              echo "| ♿ Accessibility | $ACCESSIBILITY% |" >> lighthouse-results/SUMMARY.md
              echo "| ✅ Best Practices | $BEST_PRACTICES% |" >> lighthouse-results/SUMMARY.md
              echo "| 🔍 SEO | $SEO% |" >> lighthouse-results/SUMMARY.md
              echo "" >> lighthouse-results/SUMMARY.md
            fi
          done

      - name: "📤 Upload Lighthouse reports"
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ matrix.test_branch }}-${{ github.run_number }}
          path: lighthouse-results/
          retention-days: 30

      - name: "📋 Push reports to lighthouse-reports branch"
        run: |
          # Create timestamped directory for this run
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
          BRANCH_NAME="lighthouse-reports"
          REPORT_DIR="reports/${{ matrix.test_branch }}/${TIMESTAMP}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create or checkout lighthouse-reports branch
          git fetch origin $BRANCH_NAME:$BRANCH_NAME 2>/dev/null || git checkout --orphan $BRANCH_NAME
          git checkout $BRANCH_NAME 2>/dev/null || true

          # Clear working directory but keep .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} \; 2>/dev/null || true

          # Create report directory structure
          mkdir -p "$REPORT_DIR"

          # Copy reports to timestamped directory (if any exist)
          if [ "$(ls -A lighthouse-results/ 2>/dev/null)" ]; then
            cp -r lighthouse-results/* "$REPORT_DIR/"
          else
            echo "⚠️ No lighthouse results found to copy"
            echo "lighthouse-run-failed" > "$REPORT_DIR/lighthouse-failed.txt"
          fi

          # Create/update index with latest reports
          cat > README.md << 'EOF'
          # 🔦 Lighthouse Performance Reports

          Automated performance monitoring reports for Violet Vault.

          ## Latest Reports

          EOF

          # Add this run to the index
          echo "### $(date -u '+%Y-%m-%d %H:%M:%S UTC') - ${{ matrix.test_branch }}" >> README.md
          echo "" >> README.md
          echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> README.md
          echo "**Workflow:** [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> README.md
          echo "**Reports:** [Browse Reports](https://github.com/${{ github.repository }}/tree/$BRANCH_NAME/$REPORT_DIR)" >> README.md
          echo "" >> README.md

          # Add report links
          for file in "$REPORT_DIR"/*.html; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .report.html)
              echo "- [${PAGE} Report](https://github.com/${{ github.repository }}/blob/$BRANCH_NAME/$REPORT_DIR/$(basename "$file"))" >> README.md
            fi
          done

          echo "" >> README.md
          echo "---" >> README.md
          echo "" >> README.md

          # Add all changes
          git add .

          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "📊 Lighthouse reports for ${{ matrix.test_branch }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          Generated from commit ${{ github.sha }}
          Workflow run: ${{ github.run_id }}"

            git push origin $BRANCH_NAME
            echo "✅ Reports pushed to $BRANCH_NAME branch"
            echo "reports_url=https://github.com/${{ github.repository }}/tree/$BRANCH_NAME/$REPORT_DIR" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No changes to commit"
          fi
        id: reports

      - name: "🚨 Check for performance issues and create GitHub issues"
        run: |
          FAILED_PAGES=""
          REPORTS_URL="${{ steps.reports.outputs.reports_url }}"

          for file in lighthouse-results/*.json; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .json)
              PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$file" 2>/dev/null || echo "0")
              ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$file" 2>/dev/null || echo "0")
              BEST_PRACTICES=$(jq -r '.categories."best-practices".score * 100 | floor' "$file" 2>/dev/null || echo "0")
              SEO=$(jq -r '.categories.seo.score * 100 | floor' "$file" 2>/dev/null || echo "0")

              # Alert if any category is not 100%
              ISSUES=""
              if [ "$PERFORMANCE" -lt 100 ] && [ "$PERFORMANCE" != "N/A" ]; then
                ISSUES="$ISSUES Performance: $PERFORMANCE%"
              fi
              if [ "$ACCESSIBILITY" -lt 100 ] && [ "$ACCESSIBILITY" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }Accessibility: $ACCESSIBILITY%"
              fi
              if [ "$BEST_PRACTICES" -lt 100 ] && [ "$BEST_PRACTICES" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }Best Practices: $BEST_PRACTICES%"
              fi
              if [ "$SEO" -lt 100 ] && [ "$SEO" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }SEO: $SEO%"
              fi

              if [ -n "$ISSUES" ]; then
                FAILED_PAGES="$FAILED_PAGES\n- **$PAGE**: $ISSUES"
              fi
            fi
          done

          if [ -n "$FAILED_PAGES" ]; then
            echo "🚨 Lighthouse score issues detected:"
            echo -e "$FAILED_PAGES"
            echo "performance_issues=true" >> $GITHUB_OUTPUT
            echo "failed_pages<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FAILED_PAGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "reports_url=$REPORTS_URL" >> $GITHUB_OUTPUT
          else
            echo "✅ All pages achieve 100% scores across all categories"
            echo "performance_issues=false" >> $GITHUB_OUTPUT
          fi
        id: check_performance

      - name: "📧 Create issue for Lighthouse score improvements"
        if: steps.check_performance.outputs.performance_issues == 'true'
        uses: actions/github-script@v7
        env:
          FAILED_PAGES: ${{ steps.check_performance.outputs.failed_pages }}
          TARGET_URL: ${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}
          BRANCH_NAME: ${{ matrix.test_branch }}
          REPORTS_URL: ${{ steps.check_performance.outputs.reports_url }}
        with:
          script: |
            const failedPages = process.env.FAILED_PAGES;
            const targetUrl = process.env.TARGET_URL;
            const branchName = process.env.BRANCH_NAME;
            const reportsUrl = process.env.REPORTS_URL;

            // Determine branch-specific label
            const branchLabel = branchName === 'develop' ? 'dev branch' : 'production-build';

            // Check for existing open Lighthouse issues for this specific branch
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: `lighthouse,monitoring,${branchLabel}`,
              per_page: 5
            });

            if (existingIssues.data.length > 0) {
              const existingIssue = existingIssues.data[0];
              console.log(`✅ Skipping duplicate issue - open Lighthouse issue exists for ${branchName}: #${existingIssue.number}`);

              // Update existing issue with latest report link
              const updateBody = `\n\n---\n**Latest Report Update:** ${new Date().toISOString()}\n📊 [View latest reports](${context.payload.repository.html_url}/actions/runs/${context.runId})`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: updateBody
              });

              return;
            }

            // Determine proper labels based on branch
            const labels = branchName === 'main'
              ? ['performance', 'lighthouse', 'monitoring', 'production', 'bug']
              : ['performance', 'lighthouse', 'monitoring', 'development', 'enhancement'];

            const issueBody = [
              `## 🔦 Lighthouse Score Optimization Alert [${branchName}]`,
              "",
              `**Date:** ${new Date().toISOString()}`,
              `**Target:** ${targetUrl}`,
              `**Branch:** ${branchName}`,
              `**Commit:** [\`${context.sha}\`](${context.payload.repository.html_url}/commit/${context.sha})`,
              "",
              "### 🚨 Pages Not Achieving 100% Scores:",
              failedPages,
              "",
              "### 📊 Full Reports",
              `**GitHub Actions Run:** [View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              reportsUrl ? `**Detailed Reports:** [Browse Reports](${reportsUrl})` : "",
              "",
              "### 🔧 Next Steps",
              "1. Review the detailed Lighthouse reports linked above",
              "2. Identify specific optimization opportunities for each failing category",
              "3. Implement fixes for accessibility, performance, SEO, or best practice issues",
              "4. Re-run monitoring to verify 100% scores achieved",
              "",
              "### 🎯 Goal",
              "Achieve 100% scores across all categories:",
              "- Performance: 100%",
              "- Accessibility: 100%",
              "- Best Practices: 100%",
              "- SEO: 100%",
              "",
              "---",
              "*This issue was automatically created by Lighthouse monitoring workflow*"
            ].join('\n');

            const issueTitle = `🚨 Lighthouse Optimization Needed [${branchName}] - ${new Date().toISOString().split('T')[0]}`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['performance', 'lighthouse', 'monitoring', branchLabel]
            });

            console.log(`✅ Created Lighthouse optimization issue for ${branchName} branch`);

  # Send notification summary
  notify:
    needs: lighthouse-audit
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: "📊 Workflow Summary"
        run: |
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"

          echo "## 🔦 Lighthouse Monitoring Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.lighthouse-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** $TARGET_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View Reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
