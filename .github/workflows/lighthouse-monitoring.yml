name: "🔦 Lighthouse Performance Monitoring"

on:
  # Run every 2 hours on develop
  schedule:
    - cron: "0 */2 * * *" # Every 2 hours for develop
    # TODO: Enable main branch monitoring when production has dev auth bypass
    # - cron: "0 6 * * *"    # Daily at 6 AM for main

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      target_url:
        description: "Target URL to test"
        required: false
        default: "https://dev.f4tdaddy.com"
        type: string

jobs:
  lighthouse-audit:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main' # Run on both develop and main branches

    steps:
      - name: "🏗️ Checkout code"
        uses: actions/checkout@v4

      - name: "🔧 Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: "📦 Install dependencies"
        run: npm ci

      - name: "🎫 Generate dev auth token"
        id: auth
        run: |
          TOKEN=$(DEV_AUTH_SECRET="${{ secrets.DEV_AUTH_SECRET }}" node scripts/generate-dev-auth-token.js | grep -A1 "🔗 Token:" | tail -1)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT
        env:
          DEV_AUTH_SECRET: ${{ secrets.DEV_AUTH_SECRET }}

      - name: "🔐 Authenticate with dev auth bypass"
        run: |
          # For now, only targeting dev environment
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"
          echo "🔐 Authenticating with $TARGET_URL..."

          # Authenticate and get cookies
          curl -c cookies.txt -b cookies.txt -L "$TARGET_URL/__dev_auth?token=${{ steps.auth.outputs.token }}&target=/dashboard"

          echo "✅ Authentication complete"

      - name: "📂 Create lighthouse directory"
        run: mkdir -p lighthouse-results

      - name: "🔦 Run Lighthouse on authenticated pages"
        run: |
          # For now, only targeting dev environment
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"

          # Pages to test (authenticated)
          PAGES=(
            "/dashboard"
            "/envelopes"
            "/transactions"
            "/bills"
            "/savings"
            "/analytics"
          )

          for PAGE in "${PAGES[@]}"; do
            echo "🔦 Testing $TARGET_URL$PAGE"

            npx lighthouse "$TARGET_URL$PAGE" \
              --chrome-flags="--headless --no-sandbox --disable-gpu" \
              --output=html \
              --output=json \
              --output-path="./lighthouse-results/$(echo $PAGE | sed 's/\//-/g')" \
              --preset=desktop \
              --quiet || echo "⚠️ Lighthouse failed for $PAGE"
          done

      - name: "📊 Generate summary report"
        run: |
          echo "# 🔦 Lighthouse Performance Report" > lighthouse-results/SUMMARY.md
          echo "" >> lighthouse-results/SUMMARY.md
          echo "**Generated:** $(date -u)" >> lighthouse-results/SUMMARY.md
          echo "**Target:** ${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}" >> lighthouse-results/SUMMARY.md
          echo "**Branch:** ${{ github.ref_name }}" >> lighthouse-results/SUMMARY.md
          echo "**Commit:** ${{ github.sha }}" >> lighthouse-results/SUMMARY.md
          echo "" >> lighthouse-results/SUMMARY.md

          # Parse JSON results and create summary
          for file in lighthouse-results/*.json; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .json)
              PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$file" 2>/dev/null || echo "N/A")
              SEO=$(jq -r '.categories.seo.score * 100 | floor' "$file" 2>/dev/null || echo "N/A")

              echo "## 📄 Page: $PAGE" >> lighthouse-results/SUMMARY.md
              echo "| Metric | Score |" >> lighthouse-results/SUMMARY.md
              echo "|--------|-------|" >> lighthouse-results/SUMMARY.md
              echo "| 🚀 Performance | $PERFORMANCE% |" >> lighthouse-results/SUMMARY.md
              echo "| ♿ Accessibility | $ACCESSIBILITY% |" >> lighthouse-results/SUMMARY.md
              echo "| ✅ Best Practices | $BEST_PRACTICES% |" >> lighthouse-results/SUMMARY.md
              echo "| 🔍 SEO | $SEO% |" >> lighthouse-results/SUMMARY.md
              echo "" >> lighthouse-results/SUMMARY.md
            fi
          done

      - name: "📤 Upload Lighthouse reports"
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports-${{ github.run_number }}
          path: lighthouse-results/
          retention-days: 30

      - name: "📋 Push reports to lighthouse-reports branch"
        run: |
          # Create timestamped directory for this run
          TIMESTAMP=$(date -u +"%Y-%m-%d_%H-%M-%S")
          BRANCH_NAME="lighthouse-reports"
          REPORT_DIR="reports/${TIMESTAMP}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create or checkout lighthouse-reports branch
          git fetch origin $BRANCH_NAME:$BRANCH_NAME 2>/dev/null || git checkout --orphan $BRANCH_NAME
          git checkout $BRANCH_NAME 2>/dev/null || true

          # Clear working directory but keep .git
          find . -mindepth 1 -maxdepth 1 ! -name '.git' -exec rm -rf {} \; 2>/dev/null || true

          # Create report directory structure
          mkdir -p "$REPORT_DIR"

          # Copy reports to timestamped directory
          cp -r lighthouse-results/* "$REPORT_DIR/"

          # Create/update index with latest reports
          cat > README.md << 'EOF'
          # 🔦 Lighthouse Performance Reports

          Automated performance monitoring reports for Violet Vault.

          ## Latest Reports

          EOF

          # Add this run to the index
          echo "### $(date -u '+%Y-%m-%d %H:%M:%S UTC') - ${{ github.ref_name }}" >> README.md
          echo "" >> README.md
          echo "**Commit:** [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> README.md
          echo "**Workflow:** [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> README.md
          echo "" >> README.md

          # Add report links
          for file in "$REPORT_DIR"/*.html; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .report.html)
              echo "- [${PAGE} Report](./$REPORT_DIR/$(basename "$file"))" >> README.md
            fi
          done

          echo "" >> README.md
          echo "---" >> README.md
          echo "" >> README.md

          # Add all changes
          git add .

          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "📊 Lighthouse reports for ${{ github.ref_name }} - $(date -u '+%Y-%m-%d %H:%M:%S UTC')

          Generated from commit ${{ github.sha }}
          Workflow run: ${{ github.run_id }}"

            git push origin $BRANCH_NAME
            echo "✅ Reports pushed to $BRANCH_NAME branch"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: "💬 Comment results on latest commit (if on PR)"
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('lighthouse-results/SUMMARY.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔦 Lighthouse Performance Report\n\n${summary}\n\n📊 [View detailed reports](${context.payload.repository.html_url}/actions/runs/${context.runId})`
            });

      - name: "🚨 Check for performance regressions"
        run: |
          FAILED_PAGES=""

          for file in lighthouse-results/*.json; do
            if [ -f "$file" ]; then
              PAGE=$(basename "$file" .json)
              PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$file" 2>/dev/null || echo "0")

              # Get all category scores
              ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$file" 2>/dev/null || echo "0")
              BEST_PRACTICES=$(jq -r '.categories."best-practices".score * 100 | floor' "$file" 2>/dev/null || echo "0")
              SEO=$(jq -r '.categories.seo.score * 100 | floor' "$file" 2>/dev/null || echo "0")

              # Alert if any category is not 100%
              ISSUES=""
              if [ "$PERFORMANCE" -lt 100 ] && [ "$PERFORMANCE" != "N/A" ]; then
                ISSUES="$ISSUES Performance: $PERFORMANCE%"
              fi
              if [ "$ACCESSIBILITY" -lt 100 ] && [ "$ACCESSIBILITY" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }Accessibility: $ACCESSIBILITY%"
              fi
              if [ "$BEST_PRACTICES" -lt 100 ] && [ "$BEST_PRACTICES" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }Best Practices: $BEST_PRACTICES%"
              fi
              if [ "$SEO" -lt 100 ] && [ "$SEO" != "N/A" ]; then
                ISSUES="$ISSUES${ISSUES:+, }SEO: $SEO%"
              fi

              if [ -n "$ISSUES" ]; then
                FAILED_PAGES="$FAILED_PAGES\n- $PAGE: $ISSUES"
              fi
            fi
          done

          if [ -n "$FAILED_PAGES" ]; then
            echo "🚨 Lighthouse score issues detected:"
            echo -e "$FAILED_PAGES"
            echo "performance_issues=true" >> $GITHUB_OUTPUT
            echo "failed_pages<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FAILED_PAGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "✅ All pages achieve 100% scores across all categories"
            echo "performance_issues=false" >> $GITHUB_OUTPUT
          fi
        id: check_performance

      - name: "📧 Create issue for Lighthouse score improvements"
        if: steps.check_performance.outputs.performance_issues == 'true'
        uses: actions/github-script@v7
        env:
          FAILED_PAGES: ${{ steps.check_performance.outputs.failed_pages }}
          TARGET_URL: ${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}
          BRANCH_NAME: ${{ github.ref_name }}
        with:
          script: |
            const failedPages = process.env.FAILED_PAGES;
            const targetUrl = process.env.TARGET_URL;
            const branchName = process.env.BRANCH_NAME;

            // Check for existing open Lighthouse issues to prevent duplicates
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'lighthouse,monitoring',
              per_page: 10
            });

            // Check if there's a recent issue (within 24 hours) with same failed pages
            const oneDayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
            const recentIssue = existingIssues.data.find(issue => {
              const issueDate = new Date(issue.created_at);
              const isSameContent = issue.body && issue.body.includes(failedPages.split('\n')[0]);
              return issueDate > oneDayAgo && isSameContent;
            });

            if (recentIssue) {
              console.log(`✅ Skipping duplicate issue - similar issue exists: #${recentIssue.number}`);
              return;
            }

            const issueBody = [
              "## 🔦 Lighthouse Score Optimization Alert",
              "",
              `**Date:** ${new Date().toISOString()}`,
              `**Target:** ${targetUrl}`,
              `**Branch:** ${branchName}`,
              "",
              "### 🚨 Pages Not Achieving 100% Scores:",
              failedPages,
              "",
              "### 📊 Full Report",
              `[View complete Lighthouse reports](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              "",
              "### 🔧 Next Steps",
              "1. Review the detailed Lighthouse reports",
              "2. Identify specific optimization opportunities",
              "3. Fix accessibility, performance, SEO, or best practice issues",
              "4. Re-run monitoring to verify 100% scores",
              "",
              "### 🎯 Goal",
              "Achieve 100% scores across all categories:",
              "- Performance: 100%",
              "- Accessibility: 100%",
              "- Best Practices: 100%",
              "- SEO: 100%",
              "",
              "---",
              "*This issue was automatically created by Lighthouse monitoring workflow*"
            ].join('\n');

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Lighthouse Optimization Needed - ${new Date().toISOString().split('T')[0]}`,
              body: issueBody,
              labels: ['performance', 'lighthouse', 'monitoring']
            });

  # Send notification summary
  notify:
    needs: lighthouse-audit
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')

    steps:
      - name: "📊 Workflow Summary"
        run: |
          # For now, only targeting dev environment
          TARGET_URL="${{ github.event.inputs.target_url || 'https://dev.f4tdaddy.com' }}"

          echo "## 🔦 Lighthouse Monitoring Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.lighthouse-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** $TARGET_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View Reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
