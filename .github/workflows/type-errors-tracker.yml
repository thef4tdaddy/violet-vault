name: Type Errors Tracker

on:
  # Run on PRs to main and develop
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tsconfig.json"
      - "package.json"
      - "package-lock.json"

  # Run on pushes to main and develop
  push:
    branches: [main, develop]
    paths:
      - "src/**"
      - "tsconfig.json"
      - "package.json"
      - "package-lock.json"

  # Manual trigger option
  workflow_dispatch:

jobs:
  type-check:
    runs-on: ubuntu-latest
    name: Track TypeScript Type Errors

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Load previous error count
        id: previous
        run: |
          if [ -f .github/data/type-errors.json ]; then
            PREVIOUS_COUNT=$(cat .github/data/type-errors.json | \
              jq -r '.currentStatus.totalErrors // 0')
          else
            PREVIOUS_COUNT=0
          fi
          echo "count=$PREVIOUS_COUNT" >> $GITHUB_OUTPUT
          echo "Previous type errors: $PREVIOUS_COUNT"

      - name: Run TypeScript type checking
        id: typecheck
        run: |
          # Run tsc and capture output (will exit 0 even with errors)
          npx tsc --noEmit > tsc-output.txt 2>&1 || true

          # Parse the output into JSON
          node scripts/parse-tsc-errors.js tsc-output.txt \
            > new-type-errors.json 2>/dev/null || \
            echo '{"currentStatus":{"totalErrors":0}}' \
            > new-type-errors.json

          # Get the new count
          NEW_COUNT=$(cat new-type-errors.json | \
            jq -r '.currentStatus.totalErrors // 0')
          echo "new_count=$NEW_COUNT" >> $GITHUB_OUTPUT
          echo "Current type errors: $NEW_COUNT"

      - name: Calculate change and check threshold
        id: check_threshold
        run: |
          PREVIOUS_COUNT="${{ steps.previous.outputs.count }}"
          NEW_COUNT="${{ steps.typecheck.outputs.new_count }}"

          # Calculate the delta
          DELTA=$((NEW_COUNT - PREVIOUS_COUNT))

          echo "üìä **Type Error Analysis**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous errors:** $PREVIOUS_COUNT" \
            >> $GITHUB_STEP_SUMMARY
          echo "- **Current errors:** $NEW_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Change:** $DELTA" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Set outputs
          echo "delta=$DELTA" >> $GITHUB_OUTPUT
          echo "previous=$PREVIOUS_COUNT" >> $GITHUB_OUTPUT
          echo "current=$NEW_COUNT" >> $GITHUB_OUTPUT

          # Check if there's a regression (increase in errors)
          if [ "$DELTA" -gt 0 ]; then
            echo "‚ùå **REGRESSION:** Type errors increased by $DELTA" \
              >> $GITHUB_STEP_SUMMARY
            echo "regression=true" >> $GITHUB_OUTPUT
            exit 1  # Fail the check if errors increased
          elif [ "$DELTA" -lt 0 ]; then
            echo "‚úÖ **IMPROVED:** Type errors decreased by $((-DELTA))" \
              >> $GITHUB_STEP_SUMMARY
            echo "regression=false" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ **STABLE:** No change in type error count" \
              >> $GITHUB_STEP_SUMMARY
            echo "regression=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload type errors artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: type-errors-json
          path: new-type-errors.json
          retention-days: 30

      - name: Update type-errors.json on main/develop push
        if: |
          github.event_name == 'push' &&
          (github.ref == 'refs/heads/main' ||
           github.ref == 'refs/heads/develop')
        run: |
          # Replace the existing type-errors.json with the new data
          cp new-type-errors.json .github/data/type-errors.json

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are changes
          if git diff --quiet .github/data/type-errors.json; then
            echo "No changes to type-errors.json"
          else
            git add .github/data/type-errors.json
            git commit -m "chore: update type errors data [skip ci]"
            git push
          fi

      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const previousCount = '${{ steps.previous.outputs.count }}';
            const currentCount = '${{ steps.typecheck.outputs.new_count }}';
            const delta = parseInt(currentCount) - parseInt(previousCount);
            const hasRegression = delta > 0;

            let emoji = '‚úÖ';
            let status = 'PASSED';

            if (hasRegression) {
              emoji = '‚ùå';
              status = 'BLOCKED - REGRESSION DETECTED';
            } else if (delta < 0) {
              emoji = '‚ú®';
              status = 'IMPROVED';
            }

            const body = `## ${emoji} TypeScript Type Check - ${status}

            | Metric | Value |
            |--------|-------|
            | **Previous Errors** | ${previousCount} |
            | **Current Errors** | ${currentCount} |
            | **Change** | ${delta > 0 ? '+' : ''}${delta} |
            | **Policy** | Zero tolerance for regressions |

            ${hasRegression
              ? 'üö® **This PR introduces new type errors and will be blocked.** ' +
                'Please fix the type errors before merging.'
              : delta < 0
                ? `üéâ **Great work!** This PR fixes ${-delta} type ` +
                  `error${-delta === 1 ? '' : 's'}!`
                : '‚úÖ **This PR maintains type safety with no new errors.**'
            }

            <details>
            <summary>View type error details</summary>

            The full type error analysis is available in the workflow artifacts.
            You can download the \`type-errors-json\` artifact to see detailed
            breakdown by category and file.

            To check locally, run:
            \`\`\`bash
            npm run tsc:check
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
