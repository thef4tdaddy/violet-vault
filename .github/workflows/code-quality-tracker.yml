name: Code Quality Tracker

# Unified workflow to track both ESLint and TypeScript compilation issues
on:
  # Daily tracking at 9 AM UTC
  schedule:
    - cron: "0 9 * * *" # Daily at 9 AM UTC

  # Keep PR checks for validation
  pull_request:
    branches: [main, develop]
    paths:
      - "src/**"
      - "scripts/**"
      - "*.js"
      - "*.jsx"
      - "*.ts"
      - "*.tsx"

  # Manual trigger option
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  track-code-quality:
    runs-on: ubuntu-latest
    name: Track ESLint and TypeScript Issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'schedule' && 'develop' || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run ESLint and capture warnings
        id: eslint
        run: |
          npx eslint --config configs/linting/eslint.config.js . --ext .js,.jsx,.ts,.tsx --format json > eslint-output.json 2>/dev/null || true

          # Count warnings
          WARNINGS=$(jq '[.[] | .messages[] | select(.severity == 1)] | length' eslint-output.json 2>/dev/null || echo 0)
          ERRORS=$(jq '[.[] | .messages[] | select(.severity == 2)] | length' eslint-output.json 2>/dev/null || echo 0)
          TOTAL=$((WARNINGS + ERRORS))

          echo "total=$TOTAL" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT

          echo "üìä ESLint Results: ${TOTAL} issues (${WARNINGS} warnings, ${ERRORS} errors)"

      - name: Run TypeScript compiler and capture errors
        id: typecheck
        run: |
          npm run typecheck 2>&1 | tee typecheck-output.txt || true

          # Count TypeScript errors
          TS_ERRORS=$(grep -c "error TS" typecheck-output.txt 2>/dev/null || echo 0)

          echo "total=$TS_ERRORS" >> $GITHUB_OUTPUT
          echo "üìä TypeScript Results: ${TS_ERRORS} compilation errors"

      - name: Update Issue #748 (ESLint Tracking)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const eslintTotal = ${{ steps.eslint.outputs.total }};
            const eslintWarnings = ${{ steps.eslint.outputs.warnings }};
            const eslintErrors = ${{ steps.eslint.outputs.errors }};
            const currentDate = new Date().toISOString().split('T')[0];

            // Update issue body with latest metrics
            const bodyUpdate = '| **Total Violations** | **' + eslintTotal + '** | ' + (eslintTotal === 0 ? '‚úÖ' : '‚ö†Ô∏è') + ' |\n' +
              '| **Errors** | ' + eslintErrors + ' | ' + (eslintErrors === 0 ? '‚úÖ' : '‚ùå') + ' |\n' +
              '| **Warnings** | ' + eslintWarnings + ' | ' + (eslintWarnings === 0 ? '‚úÖ' : '‚ö†Ô∏è') + ' |\n' +
              '| **Last Updated** | ' + currentDate + ' | - |';

            try {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: 748
              });

              // Update the body with new metrics in the status table
              let newBody = issue.data.body.replace(
                /\| \*\*Total Violations\*\* \| \*\*\d+\*\* \| .* \|\n\| \*\*Errors\*\* \| \d+ \| .* \|\n\| \*\*Warnings\*\* \| \d+ \| .* \|\n\| \*\*Last Updated\*\* \| [^|]+ \| - \|/,
                bodyUpdate
              );

              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: 748,
                body: newBody
              });

              console.log('‚úÖ Successfully updated Issue #748 (ESLint Tracking)');

              // Only post comment if there are violations
              if (eslintTotal > 0) {
                const commentBody = '## ‚ö†Ô∏è ESLint Issues Detected - ' + currentDate + '\n\n' +
                  '**Status**: Issues found\n\n' +
                  '- **Total Issues**: ' + eslintTotal + '\n' +
                  '  - Warnings: ' + eslintWarnings + '\n' +
                  '  - Errors: ' + eslintErrors + '\n\n' +
                  '‚ùå Code quality issues detected - review and fix before release\n\n' +
                  '_Checked: ' + currentDate + '_';

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: 748,
                  body: commentBody
                });
                console.log('‚úÖ Posted issue comment for violations');
              }
            } catch (error) {
              console.log('‚ùå Failed to update issue #748:', error.message);
            }

      - name: Update Issue #806 (TypeScript Tracking)
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const tsTotal = ${{ steps.typecheck.outputs.total }};
            const currentDate = new Date().toISOString().split('T')[0];

            // Only post comment if there are errors
            if (tsTotal > 0) {
              const commentBody = '## üî¥ TypeScript Errors Detected - ' + currentDate + '\n\n' +
                '**Status**: Compilation errors found\n\n' +
                '- **Total Errors**: ' + tsTotal + '\n\n' +
                '‚ùå ' + tsTotal + ' compilation errors - blocks v2.0 release\n\n' +
                '_Checked: ' + currentDate + '_';

              try {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: 806,
                  body: commentBody
                });
                console.log('‚úÖ Posted issue comment for TypeScript errors');
              } catch (error) {
                console.log('‚ùå Failed to post comment on issue #806:', error.message);
              }
            } else {
              console.log('‚úÖ TypeScript check passed - no comment posted');
            }

      - name: Create summary comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const eslintTotal = ${{ steps.eslint.outputs.total }};
            const tsTotal = ${{ steps.typecheck.outputs.total }};

            let statusEmoji = '‚úÖ';
            let statusText = 'All checks pass';

            if (eslintTotal > 0 || tsTotal > 0) {
              statusEmoji = '‚ö†Ô∏è';
              statusText = 'Code quality issues detected';
            }

            const mergeStatus = eslintTotal === 0 && tsTotal === 0 ? '‚úÖ Ready to merge' : '‚ö†Ô∏è Please review and fix issues before merging';
            const commentBody = '## ' + statusEmoji + ' Code Quality Check\n\n' +
              '**ESLint**: ' + eslintTotal + ' issues\n' +
              '**TypeScript**: ' + tsTotal + ' compilation errors\n\n' +
              mergeStatus;

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            } catch (error) {
              console.log('Could not create PR comment:', error.message);
            }
