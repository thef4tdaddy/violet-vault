name: ESLint Daily Monitor

on:
  push:
    branches: [nightly, develop]
  schedule:
    # Run daily at 9 AM UTC
    - cron: "0 9 * * *"
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  TRACKING_ISSUE: "214"
  MAX_INCREASE_PERCENT: 20
  # Disable main branch monitoring until 4.0 release
  MONITOR_MAIN: "false"

jobs:
  eslint-monitor:
    name: ESLint Daily Monitor
    runs-on: ubuntu-latest
    # Only run on allowed branches (main disabled until 4.0 release)
    if: |
      github.ref_name == 'nightly' ||
      github.ref_name == 'develop'

    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint and generate report
        id: eslint_run
        run: |
          echo "Running ESLint analysis..."
          npm run lint:report || true

          # Get current count
          CURRENT_PROBLEMS=$(npm run lint 2>&1 | grep "✖" | grep -oE '[0-9]+ problems' | grep -oE '[0-9]+' || echo "0")
          CURRENT_ERRORS=$(npm run lint 2>&1 | grep "✖" | grep -oE '[0-9]+ errors' | grep -oE '[0-9]+' || echo "0")
          CURRENT_WARNINGS=$(npm run lint 2>&1 | grep "✖" | grep -oE '[0-9]+ warnings' | grep -oE '[0-9]+' || echo "0")

          echo "current_problems=$CURRENT_PROBLEMS" >> $GITHUB_OUTPUT
          echo "current_errors=$CURRENT_ERRORS" >> $GITHUB_OUTPUT
          echo "current_warnings=$CURRENT_WARNINGS" >> $GITHUB_OUTPUT

          echo "📊 Current Status: $CURRENT_PROBLEMS problems ($CURRENT_ERRORS errors, $CURRENT_WARNINGS warnings)"

      - name: Get previous metrics from issue
        id: previous_metrics
        uses: actions/github-script@v8
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.TRACKING_ISSUE)
            });

            const body = issue.data.body;

            // Extract previous count from issue body
            const statusMatch = body.match(/\*\*Current Status:\*\*.*?(\d+)\s+problems.*?\((\d+)\s+errors?,\s*(\d+)\s+warnings?\)/);

            if (statusMatch) {
              const previousProblems = parseInt(statusMatch[1]);
              const previousErrors = parseInt(statusMatch[2]);
              const previousWarnings = parseInt(statusMatch[3]);

              core.setOutput('previous_problems', previousProblems);
              core.setOutput('previous_errors', previousErrors);
              core.setOutput('previous_warnings', previousWarnings);

              console.log(`📋 Previous: ${previousProblems} problems (${previousErrors} errors, ${previousWarnings} warnings)`);
            } else {
              core.setOutput('previous_problems', '22');
              core.setOutput('previous_errors', '0');
              core.setOutput('previous_warnings', '22');
              console.log('⚠️ Could not extract previous metrics, using baseline: 22 problems');
            }

      - name: Calculate change and check threshold
        id: check_threshold
        run: |
          CURRENT=${{ steps.eslint_run.outputs.current_problems }}
          PREVIOUS=${{ steps.previous_metrics.outputs.previous_problems }}
          MAX_INCREASE=${{ env.MAX_INCREASE_PERCENT }}

          CHANGE=$((CURRENT - PREVIOUS))

          # Special handling for zero problems
          if [ "$PREVIOUS" -eq 0 ] && [ "$CURRENT" -eq 0 ]; then
            # Both zero - maintaining zero problems
            PERCENT_CHANGE="0"
            echo "change=0" >> $GITHUB_OUTPUT
            echo "percent_change=0" >> $GITHUB_OUTPUT
            echo "🎉 Zero problems maintained!"
          elif [ "$PREVIOUS" -eq 0 ]; then
            # Previous was zero, now have problems - this is a regression
            PERCENT_CHANGE="∞"
            echo "change=$CHANGE" >> $GITHUB_OUTPUT
            echo "percent_change=999" >> $GITHUB_OUTPUT
            echo "❌ Regression: $CURRENT new problems introduced!"
          else
            # Normal calculation
            PERCENT_CHANGE=$(echo "scale=2; ($CHANGE / $PREVIOUS) * 100" | bc)
            echo "change=$CHANGE" >> $GITHUB_OUTPUT
            echo "percent_change=$PERCENT_CHANGE" >> $GITHUB_OUTPUT
            echo "📈 Change: $CHANGE problems ($PERCENT_CHANGE%)"
          fi

          # Check if increase exceeds threshold
          if [ "$CURRENT" -gt "$PREVIOUS" ] && (( $(echo "$PERCENT_CHANGE > $MAX_INCREASE" | bc -l) )); then
            echo "threshold_exceeded=true" >> $GITHUB_OUTPUT
            echo "❌ THRESHOLD EXCEEDED! Increase of $PERCENT_CHANGE% is above $MAX_INCREASE% limit"
          else
            echo "threshold_exceeded=false" >> $GITHUB_OUTPUT
            echo "✅ Within threshold"
          fi

      - name: Generate detailed breakdown
        id: breakdown
        run: |
          echo "Generating violation breakdown..."

          # Count by type
          MAX_LINES=$(npm run lint 2>&1 | grep "max-lines-per-function" | wc -l | tr -d ' ')
          COMPLEXITY=$(npm run lint 2>&1 | grep "complexity" | wc -l | tr -d ' ')
          OTHER=$((${{ steps.eslint_run.outputs.current_problems }} - MAX_LINES - COMPLEXITY))

          echo "max_lines=$MAX_LINES" >> $GITHUB_OUTPUT
          echo "complexity=$COMPLEXITY" >> $GITHUB_OUTPUT
          echo "other=$OTHER" >> $GITHUB_OUTPUT

      - name: Update tracking issue
        uses: actions/github-script@v8
        with:
          script: |
            const current = parseInt('${{ steps.eslint_run.outputs.current_problems }}');
            const currentErrors = parseInt('${{ steps.eslint_run.outputs.current_errors }}');
            const currentWarnings = parseInt('${{ steps.eslint_run.outputs.current_warnings }}');
            const previous = parseInt('${{ steps.previous_metrics.outputs.previous_problems }}');
            const change = parseInt('${{ steps.check_threshold.outputs.change }}');
            const percentChange = parseFloat('${{ steps.check_threshold.outputs.percent_change }}');
            const maxLines = parseInt('${{ steps.breakdown.outputs.max_lines }}');
            const complexity = parseInt('${{ steps.breakdown.outputs.complexity }}');
            const other = parseInt('${{ steps.breakdown.outputs.other }}');

            const changeEmoji = change > 0 ? '📈' : change < 0 ? '📉' : '➡️';
            const statusEmoji = currentErrors === 0 ? '✅' : '❌';

            const maxLinesSection = maxLines > 0 ? "- **max-lines-per-function** (" + maxLines + " warnings)\n  - Functions >150 lines that could benefit from extraction\n  - Non-critical, tracked in #158 (Refactoring Master)" : '';
            const complexitySection = complexity > 0 ? "- **complexity** (" + complexity + " warnings)\n  - Functions with cyclomatic complexity >15\n  - Non-critical, refactoring opportunities" : '';
            const totalReduction = ((1 - current/483) * 100).toFixed(1);
            const changePrefix = change > 0 ? '+' : '';
            const percentPrefix = percentChange > 0 ? '+' : '';
            const statusText = percentChange > 20 ? '🚨 THRESHOLD EXCEEDED' : '✅ Within limits';

            // Special status message for zero problems
            const statusMessage = current === 0
              ? "**Current Status:** " + statusEmoji + " 0 problems (0 errors, 0 warnings) ✅ 🎉\n\n## 🎉 ZERO PROBLEMS MAINTAINED! 🎉\n\n"
              : "**Current Status:** " + statusEmoji + " " + current + " problems (" + currentErrors + " errors, " + currentWarnings + " warnings)\n\n";

            const body = "## Master Tracking Issue - ALL ESLint Problems\n\n" +
              statusMessage +
              "## Progress\n" +
              "- **Started:** 483 problems (199 errors, 284 warnings)\n" +
              "- **After initial cleanup:** 276 problems (65 errors, 211 warnings)\n" +
              "- **After PR #367:** 142 problems\n" +
              "- **After architecture cleanup:** 106 problems (9 errors, 97 warnings)\n" +
              "- **Previous check:** " + previous + " problems\n" +
              "- **Current (" + context.ref_name + "):** " + current + " problems (" + currentErrors + " errors, " + currentWarnings + " warnings)\n" +
              "- **Change:** " + changeEmoji + " " + changePrefix + change + " (" + percentPrefix + percentChange + "%)\n" +
              "- **Total Reduction:** " + totalReduction + "% from start! 🎉\n\n" +
              "## Breakdown by Type\n" +
              "- **max-lines-per-function:** " + maxLines + " " + (maxLines > 0 ? '⚠️' : '✅') + "\n" +
              "- **complexity:** " + complexity + " " + (complexity > 0 ? '⚠️' : '✅') + "\n" +
              "- **other:** " + other + " " + (other > 0 ? '⚠️' : '✅') + "\n\n" +
              "## Remaining Issues\n\n" +
              "### Refactoring Only (Code Quality, Non-Breaking)\n" +
              maxLinesSection + "\n" +
              complexitySection + "\n\n" +
              "### All Critical Issues Resolved ✅\n" +
              "- ✅ All errors fixed (was 199 → now " + currentErrors + ")\n" +
              "- ✅ no-unused-vars (was 39 → now 0)\n" +
              "- ✅ no-undef (was 98 → now 0)\n" +
              "- ✅ no-explicit-any (was 15+ → now 0)\n" +
              "- ✅ react-hooks/exhaustive-deps (was 28 → now 0)\n" +
              "- ✅ react-hooks/rules-of-hooks (was 56 → now 0)\n\n" +
              "## Completed ✅\n" +
              "- ~~#421~~ - Architecture violations (localStorage, validation placement)\n" +
              "- ~~#382~~ - Critical errors (all types)\n" +
              "- ~~#366~~ - Small violations (max-statements, complexity, max-params)\n" +
              "- ~~#363~~ - react-hooks/rules-of-hooks\n" +
              "- ~~#362~~ - no-undef\n" +
              "- ~~#311~~ - Unused variables\n" +
              "- ~~#312~~ - Exhaustive deps\n" +
              "- ~~#213~~ - Zustand patterns\n" +
              "- ~~#330~~ - Max-lines (excluded useSession.ts legitimately)\n\n" +
              "## Daily Monitoring\n" +
              "- **Branch:** " + context.ref_name + "\n" +
              "- **Last Check:** " + new Date().toISOString().split('T')[0] + "\n" +
              "- **Threshold:** 20% increase blocks commits\n" +
              "- **Status:** " + statusText + "\n\n" +
              "## Related Master Issues\n" +
              "- #158 - Refactoring Master (complexity, long files/functions)\n" +
              "- #166 - TypeScript Errors Master\n\n" +
              "---\n" +
              "🤖 Last updated: " + new Date().toISOString() + "\n" +
              "📊 Auto-updated daily by [ESLint Monitor Workflow](" + context.serverUrl + "/" + context.repo.owner + "/" + context.repo.repo + "/actions/runs/" + context.runId + ")";

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(process.env.TRACKING_ISSUE),
              body: body
            });

      - name: Block if threshold exceeded
        if: steps.check_threshold.outputs.threshold_exceeded == 'true'
        run: |
          echo "❌ ESLint violations increased by ${{ steps.check_threshold.outputs.percent_change }}%"
          echo "This exceeds the ${{ env.MAX_INCREASE_PERCENT }}% threshold."
          echo "Current: ${{ steps.eslint_run.outputs.current_problems }}, Previous: ${{ steps.previous_metrics.outputs.previous_problems }}"
          exit 1

      - name: Comment on PR if threshold exceeded
        if: |
          failure() &&
          github.event_name == 'pull_request' &&
          steps.check_threshold.outputs.threshold_exceeded == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const current = '${{ steps.eslint_run.outputs.current_problems }}';
            const previous = '${{ steps.previous_metrics.outputs.previous_problems }}';
            const percentChange = '${{ steps.check_threshold.outputs.percent_change }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## 🚨 ESLint Quality Gate Failed\n\n" +
                "**ESLint violations increased by " + percentChange + "%**, exceeding the 20% threshold.\n\n" +
                "### Details\n" +
                "- **Previous:** " + previous + " problems\n" +
                "- **Current:** " + current + " problems\n" +
                "- **Increase:** " + percentChange + "%\n\n" +
                "### Action Required\n" +
                "Please reduce ESLint violations before merging. Run:\n" +
                "```bash\n" +
                "npm run lint\n" +
                "npm run lint:fix  # Auto-fix what's possible\n" +
                "```\n\n" +
                "See [issue #214](" + context.serverUrl + "/" + context.repo.owner + "/" + context.repo.repo + "/issues/214) for current status."
            });

      - name: Upload ESLint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report-${{ github.ref_name }}-${{ github.run_number }}
          path: eslint_report.json
          retention-days: 90
